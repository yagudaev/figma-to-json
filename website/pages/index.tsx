import { useState ,useMemo} from "react"
import type { NextPage } from "next"

import Head from "next/head"
import dynamic from "next/dynamic"

import { figToJson, jsonToFig } from "../lib/fig2json"
import makeNodesToTree from "../lib/utils/arrayToTree"

import { Box, Button, Container, Grid, Text, Title, useMantineColorScheme } from "@mantine/core"
import { FileUpload } from "../components/FileUpload"

const ReactJson = dynamic(() => import("react-json-view"), {
  ssr: false
})

function downloadJSON(json: any, fileName: string) {
  const dataStr = "data:text/json;charset=utf-8," + encodeURIComponent(JSON.stringify(json))
  download(dataStr, `${fileName}.json`)
}

// function to download binary Uint8array
function downloadFigma(data: Uint8Array, fileName: string) {
  const b64encoded = btoa(String.fromCharCode(...data))
  const dataStr = "data:application/x-figma;base64," + b64encoded
  download(dataStr, `${fileName.replace(".fig.json", "")}.fig`)
}

function download(dataStr: string, fileName: string) {
  const downloadAnchorNode = document.createElement("a")
  downloadAnchorNode.setAttribute("href", dataStr)
  downloadAnchorNode.setAttribute("download", fileName)
  document.body.appendChild(downloadAnchorNode)
  downloadAnchorNode.click()
  downloadAnchorNode.remove()
}


const Home: NextPage = () => {
  const [json, setJson] = useState<Object | null>(null)
  const [fileName, setFileName] = useState<string | null>(null)
  const { colorScheme } = useMantineColorScheme()
  const tree = useMemo(() => {
    if(json) {
         return makeNodesToTree((json as any).nodeChanges)
    }

    return null;
  },[json])

  function handleDownloadJSON() {
    downloadJSON(json, fileName || "figma2json.fig.json")
  }

  async function handleExportFig() {
    const data = await jsonToFig(json)
    downloadFigma(data, fileName || "figma2json.fig")
  }

  return (
    <Container>
      <Head>
        <title>Figma to JSON - File</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <Title order={1} align={"center"} mb={18}>
        File
      </Title>
      <Text align={"center"} mb={18}>
        Upload your Figma file and get JSON representation of it
      </Text>
      <Container>

        {(json && tree) ? (
          <Box mb={24 }>
            <Container style={{ display: "flex", justifyContent: "center" }} mb={10}>
              <Button onClick={handleDownloadJSON}>Download JSON</Button>
              <Button ml={8} variant='outline' onClick={handleExportFig}>
                Export .fig
              </Button>
            </Container>

            
            <Box style={{ display: "flex", justifyContent: "space-between" }} mb={24}>

            <ReactJson
              style={{ minHeight: 500, borderRadius: 10 }}
              src={json}
              onAdd={(edit) => {
                setJson(edit.updated_src)
              }}
              onEdit={(edit) => {
                setJson(edit.updated_src)
              }}
              onDelete={(edit) => {
                setJson(edit.updated_src)
              }}
              collapsed={true}
              theme={colorScheme === "dark" ? "twilight" : "shapeshifter:inverted"}
              // displayDataTypes={false}
            />


            <ReactJson
              style={{ minHeight: 500, borderRadius: 10 }}
              src={tree}
              collapsed={true}
              onAdd={(edit) => {
                setJson(edit.updated_src)
              }}
              onEdit={(edit) => {
                setJson(edit.updated_src)
              }}
              onDelete={(edit) => {
                setJson(edit.updated_src)
              }}
              theme={colorScheme === "dark" ? "twilight" : "shapeshifter:inverted"}
              // displayDataTypes={false}
            />
          </Box>
        </Box>
        ) : null}


        <FileUpload
          onDrop={async (files) => {
            const file = files[0]
            setFileName(file.name)
            const buffer = await file.arrayBuffer()
            let json

            if (file.name.endsWith(".fig")) {
              json = figToJson(buffer)
            } else if (file.name.endsWith(".json")) {
              json = JSON.parse(new TextDecoder().decode(buffer))
            } else {
              throw new Error("File must be .fig or .json")
            }
            setJson(json)
          }}
        />
      </Container>

      <Text size={"sm"} align={"left"} mt={18}>
        Note: The file api is considered internal to figma, the REST and Plugin API is designed for
        public usage.
      </Text>
      <Text size={"sm"} align={"left"} mt={0}>
        However, it is useful for reading/writing figma files for plugin authors, design tool
        authors and for design automation.
      </Text>
    </Container>
  )
}

export default Home
